const truffleAssert = require('truffle-assertions');
// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {

    // Declare few constants and assign a few sample accounts generated by ganache-cli
    let sku = 1
    let upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei('1', "ether")
    const itemState = {
        Harvested: 0,
        Processed: 1,
        Packed: 2,
        ForSale: 3,
        Sold: 4,
        Shipped: 5,
        Received: 6,
        Purchased: 7,
    }
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const anyoneID = accounts[5]

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])
    console.log("Anyone: accounts[5] ", accounts[5])

    let supplyChain
    before('setup contract', async () => {
        supplyChain = await SupplyChain.new()
    })

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        // Mark an item as Harvested by calling function harvestItem()
        const tx = await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)

        // Check the emitted event Harvested()
        truffleAssert.eventEmitted(tx, 'Harvested', event => {
            return event.upc.toNumber() === upc
        })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne.itemSKU.toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne.itemUPC.toNumber(), upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne.ownerID, originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne.originFarmerID, originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne.originFarmName, originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne.originFarmInformation, originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne.originFarmLatitude, originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne.originFarmLongitude, originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo.itemState, itemState.Harvested, 'Error: Invalid item State')        
    })

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        // Mark an item as Processed by calling function processItem()
        const tx = await supplyChain.processItem(upc, { from: originFarmerID })

        // Check the emitted event Processed()
        truffleAssert.eventEmitted(tx, 'Processed', event => event.upc.toNumber() === upc)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne.itemSKU.toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne.itemUPC.toNumber(), upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne.ownerID, originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne.originFarmerID, originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne.originFarmName, originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne.originFarmInformation, originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne.originFarmLatitude, originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne.originFarmLongitude, originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo.itemState, itemState.Processed, 'Error: Invalid item State')
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        // Mark an item as Packed by calling function packItem()
        const tx = await supplyChain.packItem(upc, { from: originFarmerID })
        
        // Check the emitted event Packed()
        truffleAssert.eventEmitted(tx, 'Packed', event => event.upc.toNumber() === upc)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne.itemSKU.toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne.itemUPC.toNumber(), upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne.ownerID, originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne.originFarmerID, originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne.originFarmName, originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne.originFarmInformation, originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne.originFarmLatitude, originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne.originFarmLongitude, originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo.itemState, itemState.Packed, 'Error: Invalid item State')
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        // Mark an item as ForSale by calling function sellItem()
        const tx = await supplyChain.sellItem(upc, productPrice, { from: originFarmerID })

        // Check the emitted event ForSale()
        truffleAssert.eventEmitted(tx, 'ForSale', event => event.upc.toNumber() === upc)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne.itemSKU.toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne.itemUPC.toNumber(), upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne.ownerID, originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne.originFarmerID, originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne.originFarmName, originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne.originFarmInformation, originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne.originFarmLatitude, originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne.originFarmLongitude, originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo.productPrice, productPrice, 'Error: Invalid Product Price')
        assert.equal(resultBufferTwo.itemState, itemState.ForSale, 'Error: Invalid item State')
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        // Mark an item as Sold by calling function buyItem()
        const tx = await supplyChain.buyItem(upc, { from: distributorID, value: productPrice })

        // Check the emitted event Sold()
        truffleAssert.eventEmitted(tx, 'Sold', event => event.upc.toNumber() === upc)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne.itemSKU.toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne.itemUPC.toNumber(), upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne.ownerID, distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne.originFarmerID, originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne.originFarmName, originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne.originFarmInformation, originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne.originFarmLatitude, originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne.originFarmLongitude, originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo.productPrice, productPrice, 'Error: Invalid Product Price')
        assert.equal(resultBufferTwo.distributorID, distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo.itemState, itemState.Sold, 'Error: Invalid item State')

    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        // Mark an item as Sold by calling function shipItem()
        const tx = await supplyChain.shipItem(upc, { from: originFarmerID })

        // Check the emitted event Shipped()
        truffleAssert.eventEmitted(tx, 'Shipped', event => event.upc.toNumber() === upc)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne.itemSKU.toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne.itemUPC.toNumber(), upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne.ownerID, distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne.originFarmerID, originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne.originFarmName, originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne.originFarmInformation, originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne.originFarmLatitude, originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne.originFarmLongitude, originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo.productPrice, productPrice, 'Error: Invalid Product Price')
        assert.equal(resultBufferTwo.distributorID, distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo.itemState, itemState.Shipped, 'Error: Invalid item State')
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        // Add Retailer as a owner
        await supplyChain.addRetailer(retailerID, {from: ownerID});

        // Mark an item as Received by calling function receiveItem()
        const tx = await supplyChain.receiveItem(upc, { from: retailerID })
        
        // Check the emitted event Received()
        truffleAssert.eventEmitted(tx, 'Received', event => event.upc.toNumber() === upc)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne.itemSKU.toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne.itemUPC.toNumber(), upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne.ownerID, retailerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne.originFarmerID, originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne.originFarmName, originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne.originFarmInformation, originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne.originFarmLatitude, originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne.originFarmLongitude, originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo.productPrice, productPrice, 'Error: Invalid Product Price')
        assert.equal(resultBufferTwo.distributorID, distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo.retailerID, retailerID, 'Error: Missing or Invalid retailerID')
        assert.equal(resultBufferTwo.itemState, itemState.Received, 'Error: Invalid item State')
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        // Add Consumer as a owner
        await supplyChain.addConsumer(consumerID, {from: ownerID});
        
        // Mark an item as Purchased by calling function purchaseItem()
        const tx = await supplyChain.purchaseItem(upc, { from: consumerID })

        // Check the emitted event Purchased()
        truffleAssert.eventEmitted(tx, 'Purchased', event => event.upc.toNumber() === upc)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne.itemSKU.toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne.itemUPC.toNumber(), upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne.ownerID, consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne.originFarmerID, originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne.originFarmName, originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne.originFarmInformation, originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne.originFarmLatitude, originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne.originFarmLongitude, originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo.productPrice, productPrice, 'Error: Invalid Product Price')
        assert.equal(resultBufferTwo.distributorID, distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo.retailerID, retailerID, 'Error: Missing or Invalid retailerID')
        assert.equal(resultBufferTwo.consumerID, consumerID, 'Error: Missing or Invalid consumerID')
        assert.equal(resultBufferTwo.itemState, itemState.Purchased, 'Error: Invalid item State')
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc, { from: anyoneID })
        
        // Verify the result set:
        assert.equal(resultBufferOne.itemSKU.toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne.itemUPC.toNumber(), upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne.ownerID, consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne.originFarmerID, originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne.originFarmName, originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne.originFarmInformation, originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne.originFarmLatitude, originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne.originFarmLongitude, originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc, { from: anyoneID })
        
        // Verify the result set:
        assert.equal(resultBufferTwo.itemSKU.toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo.itemUPC.toNumber(), upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo.productID, productID, 'Error: Invalid Product Notes')
        assert.equal(resultBufferTwo.productNotes, productNotes, 'Error: Invalid Product Notes')
        assert.equal(resultBufferTwo.productPrice, productPrice, 'Error: Invalid Product Price')
        assert.equal(resultBufferTwo.distributorID, distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo.retailerID, retailerID, 'Error: Missing or Invalid retailerID')
        assert.equal(resultBufferTwo.consumerID, consumerID, 'Error: Missing or Invalid consumerID')
        assert.equal(resultBufferTwo.itemState, 7, 'Error: Invalid item State')
    })

});

